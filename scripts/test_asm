#!/bin/bash

# Usage: scripts/test_asm <testcase> [tempdir]
# The script will
# 1. Get an temporary directory
# 2. Execute <compiler> < <testcase> > "$TEMPDIR/output.s"
# 3. Get the test.in and test.ans from <testcase> using sed
# 4. Execute ravel --input-file="$TEMPDIR/test.in" --output-file="$TEMPDIR/test.out" "$TEMPDIR/output.s" [builtin]
# 5. Compare the output and exit code
# Note: This script should be used under the root directory of the project.

# Usage
if [ $# -ne 1 ] && [ $# -ne 2 ]; then
    echo "Usage: scripts/test_asm <testcase> [tempdir]" >&2
    exit 1
fi

# Set variables
TESTCASE=$1
BUILTIN="src/main/resources/builtin.s"

# Test whether the testcase file and builtin file exist or not
if [ ! -f "$TESTCASE" ]; then
    echo "Error: testcase file $TESTCASE does not exist." >&2
    exit 1
fi
source scripts/utils.bash

# Test whether ravel is installed
# If not installed, please follow the document at
# <https://github.com/Engineev/ravel>.
# Note: If you just follow the steps in the README, you need to put the last
# line (export PATH="/usr/local/opt/bin:$PATH") in your .bashrc or .zshrc
# (depending on which shell you are using).
test_bin ravel

# 1. Make temp directory
if [ $# -eq 2 ]; then
  TEMPDIR=$2
  USER_DEFINED_TEMPDIR=1
else
  USER_DEFINED_TEMPDIR=0
  TEMPDIR="$(mktemp -d -p /tmp mxc.XXXXXXXXXX)"
  if [ $? -ne 0 ]; then
    echo "Error: Failed to create temp directory." >&2
    exit 1
  fi
fi
if [ ! -d "$TEMPDIR" ]; then
  echo "Error: temp directory not exists." >&2
  exit 1
fi

# clean cleans up the temp directory
clean() {
    if [ $USER_DEFINED_TEMPDIR -eq 0 ]; then
        rm -rf "$TEMPDIR"
    fi
}

# print_temp_dir prints the temp directory
# This function is used when the test fails
print_temp_dir() {
    cat << EOF >&2
All generated files are at '$TEMPDIR'. You may check some files there.
For example, you may check the output of your compiler at '$TEMPDIR/output.s'.
Use the following command to clean up the temp directory:
    rm -rf '$TEMPDIR'
EOF
}

# 2. Compile the testcase with your compiler
echo "Compiling '$TESTCASE' with your compiler..." >&2
bin/mxc/bin/Mx-Compiler -S - < "$TESTCASE" > "$TEMPDIR/output.s"
if [ $? -ne 0 ]; then
    echo "Error: Failed to compile $TESTCASE." >&2
    clean
    exit 1
fi

# 3. Get the test.in, test.ans exit code from <testcase> using sed
sed -n '/=== input ===/,/=== end ===/{//!p}' "$TESTCASE" > "$TEMPDIR/test.in"
if [ $? -ne 0 ]; then
    echo "Error: Failed to get input from $2." >&2
    clean
    exit 1
fi
sed -n '/=== output ===/,/=== end ===/{//!p}' "$TESTCASE" > "$TEMPDIR/test.ans"
if [ $? -ne 0 ]; then
    echo "Error: Failed to get output from $2." >&2
    clean
    exit 1
fi
EXPECTED_EXIT_CODE=$(grep "ExitCode:" "$TESTCASE" | awk '{print $2}')

# 4. Execute the code with ravel
ravel --input-file="$TEMPDIR/test.in" --output-file="$TEMPDIR/test.out" "$TEMPDIR/output.s" $BUILTIN > "$TEMPDIR/ravel_output.txt"
if [ $? -ne 0 ]; then
    cat << EOF >&2
Error: Ravel exits with a non-zero value.
You may run the following command again to see the error message:
    ravel --input-file='$TEMPDIR/test.in' --output-file='$TEMPDIR/test.out' '$TEMPDIR/output.s' $BUILTIN
EOF
    print_temp_dir
    exit 1
fi

# 5. Compare the output and exit code
HAS_PROBLEM=0
diff -ZB "$TEMPDIR/test.out" "$TEMPDIR/test.ans" >&2
if [ $? -ne 0 ]; then
    echo "Error: Output mismatch." >&2
    print_temp_dir
    HAS_PROBLEM=1
fi
EXIT_CODE=$(grep 'exit code' "$TEMPDIR/ravel_output.txt" | awk '{print $3}')
if [ "$EXIT_CODE" -ne "$EXPECTED_EXIT_CODE" ]; then
    echo "Error: Exit code mismatch." >&2
    print_temp_dir
    HAS_PROBLEM=1
fi

if [ $HAS_PROBLEM -eq 0 ]; then
    print_green_msg "Passed"
    clean
    exit 0
else
    print_red_msg "Failed"
    print_temp_dir
    exit 1
fi
